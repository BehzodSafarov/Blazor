@page "/createProject"
@attribute [Authorize]

@using BlazorTask.Services.Interfaces;
@using System.Timers
@inject IProjectService  projectService;
@inject NavigationManager NavigationManager;
<PageTitle>CreateProject</PageTitle>

<h1>Create</h1>
<h1>Tab Start button and wait 10 minute</h1>
<span>Completeted times: @CountOfCompleted </span><br>

<button class="btn btn-primary" disabled="@IsStartButtonDisabled" @onclick="StartTimer">Start</button>
<button class="btn btn-danger" disabled="@IsStopButtonDisabled" @onclick="StopTimer">Stop</button>

   @if (IsStartButtonDisabled)
    {
        <div>
            <span>Processing...</span>
            <i class="fas fa-spinner fa-spin"></i>
        </div>
    }

@code {
    private System.Timers.Timer timer;
    private bool IsTimerRunning = false;
    private bool IsStartButtonDisabled = false;
    private bool IsStopButtonDisabled = true;
    private int CountOfCompleted {get; set;}

    private void StartTimer()
    {
        projectService.CreateAsync();
        timer = new System.Timers.Timer(6000000); 
        timer.Elapsed += TimerElapsed;
        timer.AutoReset = true;
        timer.Start();
        
        IsTimerRunning = true;
        IsStartButtonDisabled = true;
        IsStopButtonDisabled = false;

        StateHasChanged();
    }

    private void StopTimer()
    {
        timer.Stop();
        timer.Dispose();

        IsTimerRunning = false;
        IsStartButtonDisabled = false;
        IsStopButtonDisabled = true;

        StateHasChanged();
    }

    private async void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (IsTimerRunning)
        {
            await projectService.CreateAsync();
            CountOfCompleted++;
            InvokeAsync(StateHasChanged);
        }
    }

}