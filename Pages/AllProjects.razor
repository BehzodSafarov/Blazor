@page "/all"
@using Microsoft.AspNetCore.Identity
@using BlazorTask.Data;
@using BlazorTask.Services.Interfaces;
@inject IProjectService  projectService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<table class="table table-striped table-bordered">
    <thead class="thead-dark">
        <tr>
            <th>Logo</th>
            <th>Name</th>
            <th>Description</th>
            <th>Url</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in projects)
        {
            <tr>
                <td class="logo-cell"><img src="@project.LogoUrl" alt="Product Logo" class="image" /></td>
                <td>@project.Name</td>
                <td>@project.Description</td>
                <td>@project.RepoUrl</td>
                @if (UserRole == "Admin")
                {  
                    <td class="action-cell">
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(project)">Delete</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code{
    private List<Project> projects  = new List<Project>();
    private string UserRole { get; set; } = "User";
    private async void DeleteProduct(Project product)
    {
        await projectService.DeleteAsync(product.Id);
        OnInitialized();
    }

    protected async override void OnInitialized()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity!.IsAuthenticated)
        {
            UserRole = user.Claims.FirstOrDefault(c => c.Type == "role")?.Value;
        }
        projects.Clear();
        var allProjects = await projectService.GetAllAsync();
        projects.AddRange(allProjects);
    }

}

<style>
    .image {
        width: 50px; /* Adjust the width as per your requirement */
        height: auto; /* Maintain the aspect ratio */
    }
</style>
